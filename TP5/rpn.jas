// 
//   rpn.jas
//
//   Author
//	Ruth AYIVI <ruth.ayivi@etudiant.univ-rennes1.fr>
//	Ezan TAHI <ezan.tahi@etudiant.univ-rennes1.fr>
//
//   Description
//	Ce programme lit des caractères tapés dans la "input console" en notation
//	polonaise inversée et affiche le résultat du calcul dans la "output console"
//


// Définition des constantes

.constant

empty	0	// Code ASCII du caractère vide
enter	10	// Code ASCII du caractère de fin de ligne
plus	43	// Code ASCII du caractère '+'
minus	45	// Code ASCII du caractère '-'
zero	48	// Code ASCII du caractère '0'
nine	57	// Code ASCII du caractère '9'

.end-constant


// Programme prinipal

.main

BEGIN:		IN				// Cette instruction lit un caractère et le met sur la pile
		DUP          			// Duplique l'élément au sommet de la pile (pour la comparaison)
      		LDC_W empty   			// Empile la constante empty pour la comparer avec le caractère lu
      		IF_ICMPEQ REMOVE_IN 		// Si le caractère lu est vide, on l'enlève de la pile
      		
      		DUP				// Sinon, on duplique à nouveau le caractère lu
		LDC_W plus			// Empile la constante plus pour la comparer avec le caractère lu
		IF_ICMPEQ ADD			// Si le caractère lu est '+', on branche vers ADD (pour l'addition)
		
		DUP				// Sinon, on duplique à nouveau le caractère lu
		LDC_W minus			// Empile 45 (Code ASCII de l'opérateur '-') pour le comparer avec le caractère lu
		IF_ICMPEQ SUB			// Si le caractère lu est '-', on branche vers SUB (pour la soustraction)
		
		DUP				// Sinon, on duplique à nouveau le caractère lu
		LDC_W enter			// Empile la constante enter pour la comparer avec le caractère lu
		IF_ICMPEQ SHOW			// Si le caractère lu est FIN DE LIGNE, on branche vers OUTPUT_RESULT (pour afficher le résultat)
		
		DUP				// Sinon, on duplique à nouveau le caractère lu
		LDC_W zero			// Empile la constante zero pour la comparer avec le caractère lu
		ISUB				// On fait la différence entre le code ASCII du caractère lu et la valeur de la constante zero
		IFLT REMOVE_IN			// Si le code ASCII du caractère lu est inférieur à celui de '0', on le retire (car c'est un caractère indésirable)
		
		DUP				// Sinon, on duplique à nouveau le caractère lu
		LDC_W nine			// Empile la constante nine pour la comparer avec le caractère lu
		SWAP				// Permute les deux valeurs au sommet de la pile
		ISUB				// On fait la différence entre la valeur de la constante nine et le code ASCII du caractère lu
		IFLT REMOVE_IN			// Si le code ASCII du caractère lu est supérieur à celui de '9', on le retire (car c'est un caractère indésirable)
		
		GOTO CONVERT_IN			// A ce stade, le caractère lu est forcément dans l'intervalle 0..9, on branche vers CONVERT_IN (pour le convertir en nombre décimal)

	
// Etiquettes utiles

// SHOW: Converti la valeur au sommet de la pile en code ASCII pour l'afficher à l'écran
SHOW:		POP
		LDC_W zero
		IADD
      		OUT
      		GOTO NEW_LINE

// NEW_LINE: Fait un retour à la ligne sur la output console
NEW_LINE:	LDC_W enter
      		OUT
      		GOTO BEGIN

// ADD: Dépile deux valeurs du sommet et empile leur somme
ADD:		POP
		IADD
		// Pour éviter les débordements, si le résultat d'une addition est supérieur à 9, alors le limite à 9
		DUP
		BIPUSH 9
		SWAP
		ISUB
		IFLT SHOW_SUP_NINE
		GOTO BEGIN

// SUB: Dépile deux valeurs du sommet et empile leur différence
SUB:		POP
		ISUB
		// Pour éviter les nombres négatifs, si le résultat d'une soustraction est inférieur à 0, alors le limite à 0
		DUP
		IFLT SHOW_NEGATIVE
		GOTO BEGIN

// CONVERT_IN: Converti le code ASCII de la valeur au sommet de la pile en entier et empile le résultat
CONVERT_IN:   	LDC_W zero
		ISUB
      		GOTO BEGIN

// REMOVE_IN: Retire la valeur au sommet de la pile
REMOVE_IN:   	POP
      		GOTO BEGIN
      		
// SHOW_NEGATIVE: Empile un 0 au cas où le résultat d'une opération est négatif
SHOW_NEGATIVE:	POP
		BIPUSH 0
      		GOTO BEGIN
      		
// SHOW_SUP_NINE: Empile un 9 au cas où le résultat d'une opération est supérieur à neuf
SHOW_SUP_NINE:	POP
		BIPUSH 9
      		GOTO BEGIN

.end-main
