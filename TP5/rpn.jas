// 
//   rpn.jas
//
//   Author
//	Ruth AYIVI <ruth.ayivi@etudiant.univ-rennes1.fr>
//	Ezan TAHI <ezan.tahi@etudiant.univ-rennes1.fr>
//
//   Description
//	Ce programme lit des caractères tapés dans la "input console" en notation
//	polonaise inversée et affiche le résultat du calcul dans la "output console"
//

.main

BEGIN:		IN				// Cette instruction lit un caractère et le met sur la pile
		DUP          			// Duplique l'élément au sommet de la pile (pour la comparaison)
      		BIPUSH 0x0   			// Empile 0x0 pour comparer avec le caractère lu
      		IF_ICMPEQ REMOVE_IN 		// Si le caractère lu est vide, on l'enlève de la pile
      		
      		DUP				// Sinon, on duplique à nouveau le caractère lu
		BIPUSH 43			// Empile 43 (Code ASCII de l'opérateur '+') pour le comparer avec le caractère lu
		IF_ICMPEQ ADD			// Si le caractère lu est '+' on branche vers ADD (pour l'addition)
		
		DUP				// Sinon, on duplique à nouveau le caractère lu
		BIPUSH 45			// Empile 45 (Code ASCII de l'opérateur '-') pour le comparer avec le caractère lu
		IF_ICMPEQ SUB			// Si le caractère lu est '-' on branche vers SUB (pour la soustraction)
		
		DUP				// Sinon, on duplique à nouveau le caractère lu
		BIPUSH 10			// Empile 10 (Code ASCII de l'opérateur FIN DE LIGNE) pour le comparer avec le caractère lu
		IF_ICMPEQ SHOW			// Si le caractère lu est FIN DE LIGNE, on branche vers OUTPUT_RESULT (pour afficher le résultat)
		
		DUP
		BIPUSH 0x30
		IFLT REMOVE_IN
		
		GOTO CONVERT_IN			// A ce stade, le caractère lu est forcément dans l'intervalle 0..9, donc on branche vers CONVERT_IN

		
// Etiquettes utiles

// SHOW: Converti la valeur au sommet de la pile en code ASCII pour l'afficher à l'écran
SHOW:		POP
		BIPUSH 0x30
		IADD
      		OUT
      		GOTO BEGIN

// ADD: Dépile deux valeurs du sommet et empile leur somme
ADD:		POP
		IADD
		GOTO BEGIN

// SUB: Dépile deux valeurs du sommet et empile leur différence
SUB:		POP
		ISUB
		GOTO BEGIN

// CONVERT_IN: Converti le code ASCII de la valeur au sommet de la pile en entier et empile le résultat
CONVERT_IN:   	BIPUSH 0x30
		ISUB
      		GOTO BEGIN

// REMOVE_IN: Retire la valeur au sommet de la pile
REMOVE_IN:   	POP
      		GOTO BEGIN

.end-main
